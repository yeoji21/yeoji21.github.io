[ { "title": "[JPA] @OneToOne 연관관계 매핑 시 주의사항", "url": "/posts/jpa-one-to-one/", "categories": "Backend, ORM, JPA", "tags": "java, jpa, spring", "date": "2022-07-17 00:00:00 +0900", "snippet": "이번 포스트에서는 JPA의 @OneToOne 매핑을 사용하면서 마주한 문제에 대해 얘기해보겠습니다.결론부터 말씀드리자면 JPA에서 OneToOne 관계로 엔티티를 연결할 경우, Lazy Loading이 보장되지 않을 수 있습니다.어떤 경우에 이런 문제가 발생하고, 어떻게 해결하면 좋을까요?문제 상황을 간단히 하면 다음과 같습니다.하나의 가게는 하나의 가게 위치를 갖습니다.이때 가게의 위치는 가게를 지도에 표시하기 위한 위도, 경도 정보를 비롯한 다양한 정보들이 추가될 수 있기 때문에 가게 위치 테이블로 별도로 분리하고 가게와 ..." }, { "title": "객체지향에서의 상속과 다형성", "url": "/posts/polymorphism-inheritance/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2022-07-13 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 조영호님의 오브젝트를 바탕으로 정리한 글입니다.객체지향과 상속객체지향 언어에서 상속은 뗼레야 뗄 수 없는 관계라는 말, 자주 들어보셨을 것 같은데요저도 학교에서 자바를 처음 배울 때 상속을 강의 초반에 배웠고 굉장히 재밌다고 느꼈던 기억이 있습니다.(처음 배운 자바와 C언어와의 직접적인 차이점이었던 것 같네요 🤔)그만큼 상속은 객체지향에서 굉장히 중요하고 기본적인 개념이기에 모두가 상속에 대해서 알고는 있지만,모두가 상속을 올바르게 이해하고 있지는 않을 것 같습니다.불과 얼마 전까지 누군가 저에게 상..." }, { "title": "[JAVA] Java Refelction 마스터 강의 3장", "url": "/posts/reflection-3/", "categories": "Backend, Java", "tags": "java, 자바", "date": "2022-06-21 00:00:00 +0900", "snippet": "들어가면서유데미의 Java 심화 과정: Java Reflection 마스터 강의 내용을 정리한 글입니다. 자세한 내용은 강의를 통해 확인해주시길 바랍니다.필드 검사와 배열 검사필드 개요 자바 클래스에서 필드는 클래스나 인터페이스 안에서 선언된 변수를 의미 클래스 인스턴스에 따라 메모리와 값은 다름 Reflection에서 Field 클래스는 각 필드를 의미하며, 각 필드 객체에는 필드 이름이 있고 필드 타입과 다양한 특성이 있다.Field 클래스를 얻는 방법 Class.getDeclaredFields() ..." }, { "title": "[JAVA] Java Refelction 마스터 강의 2장", "url": "/posts/reflection-2/", "categories": "Backend, Java", "tags": "java, 자바", "date": "2022-06-20 00:00:00 +0900", "snippet": "들어가면서유데미에 있는 Java 심화 과정: Java Reflection 마스터 강의 내용을 정리한 글입니다. 자세한 내용은 강의를 통해 확인해주시길 바랍니다.1. 객체 생성과 생성자Constructor 클래스 자바 클래스의 생성자는 Constructor 클래스의 인스턴스로 나타냄 이 객체는 클래스 생성자의 모든 정보를 포함Constructor 클래스를 얻는 방법 첫 번째로 클래스의 생성자를 얻는 가장 유용한 메소드는 Class.getDeclaredConstructors() 생성자의 접근자에 관계없이 클래..." }, { "title": "[JAVA] Java Refelction 마스터 강의 1장", "url": "/posts/reflection-1/", "categories": "Backend, Java", "tags": "java, 자바", "date": "2022-06-19 00:00:00 +0900", "snippet": "들어가면서유데미에 있는 Java 심화 과정: Java Reflection 마스터 강의 내용을 정리한 글입니다. 자세한 내용은 강의를 통해 확인해주시길 바랍니다.1. Java Reflection 개요리플렉션이란 실행하는 동안 애플리케이션 클래스와 객체 정보를 추출할 수 있는 JVM 기능이다. JDK의 리플렉션 API로 구현할 수 있다. 리플렉션을 통해 다양한 sw 컴포넌트를 연결하고 소스 코드의 수정 없이 새로운 프로그램 순서를 만들 수 있다. 프로그램을 실행하면서 객체와 클래스를 분석하고 이를 입력값으로 사용할 수 있어..." }, { "title": "졸업 작품 프로젝트 회고", "url": "/posts/graduation-project-review/", "categories": "ETC, 잡담", "tags": "", "date": "2022-06-17 00:00:00 +0900", "snippet": "끝나긴 끝나네끝나지 않을 것만 같던 졸업 작품 프로젝트가 모두 마무리되었다.프로젝트는 작년 6월경에 담당 교수님이 배정되고 팀을 구성했으니 약 1년간 진행되었다.처음으로 진행해보는 장기 프로젝트였고 팀을 구성해 협업하는 프로젝트 역시 처음이었기에부족한 점도 많았고 시행착오도 많았으나 돌이켜보니 정말 많은 것을 배웠다.미리 자랑 좀 하자면 우수상🏅 까지 수상하며 과정과 결과 모두 너무나 만족스러운 프로젝트였다!!올해 들어서는 본격적인 개발 단계에 들어 알고리즘, 학교 공부, 졸업 작품 등을 병행하다 보니블로깅을 거의 못 했는데이..." }, { "title": "[Spring] 컨트롤러에서 습관성 ResponseEntity 남발", "url": "/posts/controller-return/", "categories": "Backend, Spring", "tags": "java, spring", "date": "2022-01-30 00:00:00 +0900", "snippet": "개발바닥 단톡방에서 한 분이 질문을 올리셨다. 간략히 하면 컨트롤러의 반환타입으로 ResponseEntity&amp;lt;&amp;gt;를 사용하는 1번 방식과 Dto를 반환하는 2번 방식 중에 어떤 방식을 선호하는가에 대한 질문이었다.// 1번public ResponseEntity&amp;lt;Dto&amp;gt; methodName(){}//2번public Dto methodName(){}많은 분들이 의견을 공유해주셨는데, 응답 헤더를 다채롭게 구성할 수 있어 1번을 선호한다는 의견도 있었고 ResponseEntity를 컨..." }, { "title": "[알고리즘] MST - 크루스칼 vs 프림", "url": "/posts/mst/", "categories": "Backend, Algorithm", "tags": "java, algorithm, mst", "date": "2022-01-26 00:00:00 +0900", "snippet": "MST(Minimum Spanning Tree)란?Spanning Tree는 그래프의 최소 연결 부분 그래프이다. 여기서 말하는 최소 연결이란 간선의 수를 가장 적게 사용해서 연결했다는 의미로, n개의 정점을 가지는 그래프의 최소 간선 수는 n-1개이다.무방향 그래프 G(V,E)에서 E에 속한 간선들로 사이클을 포함하지 않으면서 모든 정점 V를 연결한 부분 그래프를 Spanning Tree라 한다.하나의 그래프에서 Spanning Tree는 여러 개 존재할 수 있으며, Spanning Tree는 n개의 정점을 가질 때 n-1개..." }, { "title": "[Spring] 의존성 주입 시 생성자 주입을 사용해야 하는 이유 ", "url": "/posts/injection/", "categories": "Backend, Spring", "tags": "java, spring", "date": "2022-01-22 00:00:00 +0900", "snippet": "의존성 주입이란?의존성 주입이란, 설계 시점에는 알지 못했던 두 오브젝트가 서로 관계를 맺을 수 있도록 도와주는 것을 말한다.이때 DI 컨테이너에 의해 런타임 시에 의존 오브젝트를 사용할 수 있도록 그 레퍼런스를 전달받는 과정이 마치 메소드를 통해 DI 컨테이너가 오브젝트에게 레퍼런스를 주입해주는 것과 같다고 해서 이를 의존성 주입이라고 부른다.DI가 적용되면, 런타임 시에는 클래스에 대한 의존관계가 나타나지 않고 결합도가 낮은 코드가 만들어지기 때문에 서로 다른 책임을 가진 의존성이 변경되더라도 자신은 영향을 받지 않으며, ..." }, { "title": "JWT 기본 정리", "url": "/posts/jwt-1/", "categories": "Backend, Web", "tags": "web, oauth, jwt", "date": "2022-01-10 00:00:00 +0900", "snippet": "JWT란?JWT (Json Web Token)란, 웹표준(RFC 7519)으로, Json 포맷을 이용하여 사용자에 대한 속성을 저장하는 Claim 기반의 Web Token이다.JWT는 토큰 자체를 정보로 사용하는 Self-Contained 방식으로 정보를 안전하게 전달한다.토큰 기반의 인증 시스템토큰 기반의 인증 시스템에서는 인증받은 사용자들에게 토큰을 발급하고, 서버에 요청을 할 때, 요청 헤더에 토큰을 함께 보내도록 하여 유효성 검사를 한다.이러한 시스템에서는 사용자의 인증 정보를 서버나 세션에 유지하지 않고, 클라이언트 ..." }, { "title": "2021년 회고", "url": "/posts/2021Memoirs/", "categories": "ETC, 잡담", "tags": "", "date": "2021-12-27 00:00:00 +0900", "snippet": "2021년을 보내면서이 글을 쓰고 있는 지금도 2021년이 다 지나갔다는게 믿기지 않는다. 주변에서 대학교 삼학년은 사망년이라고 하는 우스갯소리를 들은 적이 있는데, 막상 겪어보니 농담이 아니라 다큐였다.나름 바쁘기도 많이 바빴고, 이룬 것도 꽤 많은 한해였는데난 어제 뭐 먹었는지도 기억 안나기 때문에 다 잊어버리기 전에 기억할 만한 일들을 정리해보려고 한다.나의 2021년 이슈들 :white_check_mark: 두 번의 성적 장학금 진로에 대한 결정 백엔드 개발자 준비의 시작 졸업 작품두 번의 성적 장학금올 초부터..." }, { "title": "[Querydsl] Querydsl 강의 정리 - 1", "url": "/posts/querydsl-1/", "categories": "Backend, ORM, Querydsl", "tags": "java, jpa, spring", "date": "2021-12-26 00:00:00 +0900", "snippet": "들어가면서인프런에 있는 김영한님의 실전! Querydsl 강의를 정리한 글입니다. 자세한 내용은 강의를 통해 확인해주시길 바랍니다.목차 build.gradle 설정 테스트 클래스 setUp Q-type 클래스 Querydsl 기본 문법 Querydsl 중급 문법build.gradle 설정buildscript { ext { queryDslVersion = &quot;5.0.0&quot; }}plugins { id &#39;org.springframework.boot&#39; version &#39;2.5.6&#39; ..." }, { "title": "클린 코더스 강의 정리 - 15장 ISP, DIP", "url": "/posts/ch15/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-17 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 14.3. ISP(Interface Segregation Principle)Don’t depend on things that you don’t need사용하지 않는 인터페이스에 대해 의존성을 가지고 있다면 그 인터페이스가 변결될 때마다 함께 재컴파일/빌드/배포되어야 한다. 사용하지 않는 인터페이스때문에 독립적인 개발/배포가 불가해진다는 의미이다.이는 한 기능에 변경이 발생하면 다른 기능을 ..." }, { "title": "클린 코더스 강의 정리 - 14장 OCP, LSP", "url": "/posts/ch14/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-16 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 14.1. OCP(Open-Closed Principle)Open and Closed Betrand Meyer, “Object-oriented Software Construction”Open for Extension But Closed for modification확장에는 열려있고 변경에는 닫혀있는 것확장에 열려있다는 것은 type을 추가함으로써 새로운 요구사항을 만족할 수 있는 것을 말..." }, { "title": "클린 코더스 강의 정리 - 13장 SRP", "url": "/posts/ch13/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-14 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 13. SRP(Single Responsibility Principle)Responsibility클래스는 하나의 책임을 가져야 한다.이런 EmployeeImpl 클래스가 있다고 할 때, 이 클래스의 책임은 무엇인가? 메소드가 3개 있으니 책임도 3가지일까?만약 여기서 findById() 메소드가 추가되었다면, 책임이 더 늘어나는 것인가?그렇지 않다. save()와 findById()는 같은..." }, { "title": "클린 코더스 강의 정리 - 12장 SOLID Foundation", "url": "/posts/ch12/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-14 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 12. SOLID Foundation 소스코드 자체가 설계다 안좋은 설계의 냄새 - Rigidity, Fragility, Immobility 불필요한 복잡성 코드가 썩어가는 현상The Source Code is the Design건축 엔지니어나 전기 엔지니어가 하는 일은 설계도, 회로도같은 document를 만드는 것이다.그렇다면 소프트웨어 엔지니어의 결과물은 무엇인가? 소스코드인가..." }, { "title": "클린 코더스 강의 정리 - 10장,11장 Architecture와 UseCase", "url": "/posts/ch10/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-14 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 10. Architecture Architecture란 무엇인가? 결정 미루기 핵심 추상화What is Architecture아키텍처란, 전체적인 시스템 개발에 기반을 제공하는 변경 불가한 초기 결정사항의 집합이다.쉽게 말해서 초기에 결정해야할 사항 중 변경 불가능한 것들의 집합하지만 java(language), Intellij(development environment), Sprin..." }, { "title": "클린 코더스 강의 정리 - 7장, 8장, 9장 TDD", "url": "/posts/ch07/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-14 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 7. TDD1. The Three Laws of TDD 실패한 테스트를 통과하기 위한 경우를 제외하고는 production code를 작성하지 않는다. 테스트 코드는 오류를 실패를 발생시키기에 적절한 테스트만 생성한다. production code는 실패한 테스트를 통과하기에 적절한 정도로만 작성한다.2. 원칙 &amp;amp; 팁 가장 심플하고 일차원적인 테스트를 생성하라. 그렇게..." }, { "title": "클린 코더스 강의 정리 - 6장 Form", "url": "/posts/ch06/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-13 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 6. Form1. Coding Standards조직이 일정 수준의 크기가 되면 관료적인 문서화를 요구한다.따라서 어떠한 Coding Standard가 필요한 것은 맞으나, 별도의 문서로 유지하는 것은 고려해봐야할 사항이다. Coding Standard는 코드 내에서 명확하게 보여져야 하는 것이지, 별도의 문서로 작성한다는 것은 코드가 Coding Standard에 적합하지 않다는 것을 의미..." }, { "title": "클린 코더스 강의 정리 - 5장 Function Structure", "url": "/posts/ch05/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-11 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 5. Function Structure1. Arguments 인자가 많아지면 복잡도가 증가한다. 3개의 인자가 최대 그 이상 넘어가면 외우기 어렵다. 따라서 Intellij의 Introduce Parameter Object 기능을 사용해서 파라미터들을 하나의 클래스로 만드는 것을 추천한다. 생성자에 많은 수의 인자를 넘겨야 한다면, setter를 사용하거나 Builder패턴을 적용하..." }, { "title": "클린 코더스 강의 정리 - 3장, 4장 Function", "url": "/posts/ch03/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-10 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 3. Function1. 원칙 한 가지 일만 해야 한다. 메소드의 크기는 과장 보태서 4줄짜리여야 한다. 따라서 indentation, while, nested if 등은 없어야 잘 지어진 서술적인 이름을 갖는 많은/작은 메소드들로 유지해야 한다.2. The First Rule of Functions 더 이상 작아질 수 없을만큼 작아야 한다. 큰 메소드를..." }, { "title": "클린 코더스 강의 정리 - 1장, 2장 소개 및 OOP", "url": "/posts/ch01/", "categories": "Backend, OOP", "tags": "java, oop, programming", "date": "2021-11-09 00:00:00 +0900", "snippet": "들어가면서 해당 포스트는 백명석님의 클린 코더스 강의를 정리한 내용입니다. 강의 자료는 깃 허브에서 보실 수 있습니다.클린 코더스 강의 1. 소개 및 OOP마틴 파울러 “기계가 이해할 수 있는 코드는 누구나 작성할 수 있다. 그런데 사람이 이해할 수 있는 코드는 잘 학습된 소프트웨어 엔지니어만 작성할 수 있다.”내가 구현하려는 무언가를 바로 코드로 표현하려 하지 말고, 종이에 대략적인 그림을 그려보라. 처음에는 느리게 시작하는 것 같아 보여도 장기적으로는 그 편이 더 빠르다.소프트웨어 개발이 끝나고 refactoring하려..." }, { "title": "[JPA] Spring Data JPA", "url": "/posts/spring-data-jpa1/", "categories": "Backend, ORM, JPA", "tags": "java, jpa, spring", "date": "2021-10-03 00:00:00 +0900", "snippet": "들어가면서인프런에 있는 김영한님의 실전! 스프링 데이터 JPA 강의를 정리한 글입니다. 세부사항이나 설정 등은 포스팅하지 않으니, 자세한 내용은 강의를 통해 확인해주시길 바랍니다.목차 공통 인터페이스 기능 쿼리 메소드 기능 페이징과 정렬 벌크성 수정 쿼리 @EntityGraph 확장 기능 새로운 엔티티를 구별하는 방법공통 인터페이스 기능스프링 데이터 JPA가 제공하는 공통 인터페이스를 통해 Repository 생성public interface MemberRepository extends JpaRepository&a..." }, { "title": "[Spring] Validation ", "url": "/posts/validation/", "categories": "Backend, Spring", "tags": "java, spring", "date": "2021-09-26 00:00:00 +0900", "snippet": "들어가면서인프런에 있는 김영한님의 스프링 MVC 2편 - 백엔드 웹 개발 활용 기술 강의를 정리한 글입니다. 세부사항이나 설정 등은 포스팅하지 않으니, 자세한 내용은 강의를 통해 확인해주시길 바랍니다.목차 BindingResult 오류 코드와 메시지 처리 MessageCodesResolver Validator 분리 Bean Validation 소개BindingResultBindingResult는 스프링이 제공하는 검증 오류를 보관하는 객체이다. 검증 오류가 발생하면 이 객체에 보관하면 된다. 따라서 BindingRes..." }, { "title": "[Spring] Spring MVC", "url": "/posts/spring-mvc-1/", "categories": "Backend, Spring", "tags": "java, spring", "date": "2021-09-25 00:00:00 +0900", "snippet": "들어가면서인프런에 있는 김영한님의 스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술 강의를 정리한 글입니다. 세부사항이나 설정 등은 포스팅하지 않으니, 자세한 내용은 강의를 통해 확인해주시길 바랍니다.목차 HTTP 요청 - 기본, 헤더 조회 HTTP 요청 파라미터 - 쿼리 파라미터, HTML Form HTTP 요청 파라미터 - @ModelAttribute HTTP 요청 메시지 - 단순 텍스트 HTTP 요청 메시지 - JSON HTTP 메시지 컨버터HTTP 요청 - 기본, 헤더 조회@RequestMapping(&quo..." }, { "title": "[JPA] JPA 기초 정리 - 2", "url": "/posts/jpa-basic-2/", "categories": "Backend, ORM, JPA", "tags": "java, jpa, spring", "date": "2021-09-19 00:00:00 +0900", "snippet": "들어가면서인프런에 있는 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 정리한 글입니다. 세부사항이나 설정 등은 포스팅하지 않으니, 자세한 내용은 강의를 통해 확인해주시길 바랍니다.목차 값 타입 객체지향 쿼리 언어 (JPQL)값 타입JPA의 데이터 타입은 크게 두 가지로 분류할 수 있다. 엔티티 타입 @Entity로 정의하는 객체 데이터가 변해도 식별자(PK)로 지속해서 추적 가능 값 타입 int, Integer, String처럼 단순히 값으로 사용하는..." }, { "title": "[JPA] JPA 기초 정리 - 1", "url": "/posts/jpa-basic-1/", "categories": "Backend, ORM, JPA", "tags": "java, jpa, spring", "date": "2021-09-13 00:00:00 +0900", "snippet": "들어가면서인프런에 있는 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 정리한 글입니다. 세부사항이나 설정 등은 포스팅하지 않으니, 자세한 내용은 강의를 통해 확인해주시길 바랍니다.목차 JPA 시작 영속성 관리 엔티티 매핑 연관관계 매핑 기초 다양한 연관관계 매핑 고급 매핑 프록시와 연관관계 관리JPA 시작Hello JPA - 애플리케이션 개발객체와 테이블을 생성하고 매핑하기@Entity@Getter @Setterpublic class Member{ @Id private long id; ..." }, { "title": "[JAVA] 스트림 (Stream)", "url": "/posts/stream/", "categories": "Backend, Java", "tags": "java, 자바", "date": "2021-09-05 03:20:00 +0900", "snippet": "목차 스트림이란? 스트림 만들기 스트림의 중간 연산 Optional와 OptionalInt 스트림의 최종 연산스트림이란?지금까지 우리는 많은 수의 데이터를 다룰 때, 컬렉션이나 배열에 데이터를 담은 뒤 원하는 결과를 얻기 위해 for문과 Iterator를 이용해서 코드를 작성했다. 그러나 이런 방식으로 작성된 코드는 너무 길고 알아보기 힘들뿐더러 코드의 재사용성도 떨어진다.또 다른 문제는 데이터 소스마다 다른 방식으로 다뤄야한다는 것인데, Collection이나 Iterator와 같은 인터페이스를 이용해서 컬렉션을 다..." }, { "title": "[JAVA] 컬렉션 프레임워크 (Collections Framework)", "url": "/posts/collections/", "categories": "Backend, Java", "tags": "java, 자바", "date": "2021-09-03 03:55:00 +0900", "snippet": "목차 컬렉션 프레임워크란? 컬렉션 프레임워크의 핵심 인터페이스 ArrayList LinkedList Stack과 Queue HashSet TreeSet HashMap과 Hashtable TreeMap 그 외컬렉션 프레임워크란?컬렉션 프레임워크란, 데이터 군을 저장하는 클래스들을 표준화한 설계를 뜻한다. 여기서 컬렉션(Collection)은 다수의 데이터, 데이터 그룹을 의미하고 프레임워크(Framework)는 표준화된 프로그래밍 방식을 말한다.JDK 1.2 이전까지는 Vector, Hashtable, Prop..." }, { "title": "[도서] 객체지향의 사실과 오해 ", "url": "/posts/object_orientation/", "categories": "Book, Review", "tags": "", "date": "2021-09-02 03:35:00 +0900", "snippet": "후기이 책은 내가 존경하는 개발자 선배님들이 많이 추천해주셨기도 하고, 자바를 기초부터 다시 공부하고 있었던 나로서는 꼭 읽고싶었던 책이기에 망설임 없이 구매했다.책을 직접 읽어보니 왜 많은 분들이 추천했는지 알 수 있었다. 책장을 넘길 때마다 내가 가지고있던 객체지향에 대한 개념들이 잘못되었다는 것을 알게되어 지루할 틈이 없었고, 조영호님이 내 머릿속을 꿰뚫고 있는 것 같아 신기했다.내 생각이지만 이 책은 개발을 처음 시작하는 왕초보 보다는, 객체지향 언어를 어느정도 사용하면서 삽질?을 해본 사람이 읽으면 더 느낀 점이 많을..." }, { "title": "백기선님과 함께 하는 자바 스터디 - 후기", "url": "/posts/javastudy-end/", "categories": "Backend, Java", "tags": "", "date": "2021-08-31 20:10:00 +0900", "snippet": "2021년 8월 8일에 1주차 스터디를 시작해서 스터디가 끝난 오늘은 8월 31일.공교롭게도 오늘은 3학년 여름방학 마지막 날이다. 내일 개강이라니..여름 방학 막바지 3주 정도를 이 스터디에만 온전히 투자했다.“이번 방학 안에 자바 기초 스터디를 시작하겠어!”라는 목표를 가지고 시작한 건 아니고.. 유튜브에서 스터디 소식을 보고 확 꽂혀서 바로 블로그 개설하고 시작했다.사실 자바는 2학년 때 전필로 수강했었고, 내가 속한 분반에서 총점 1등으로 A+을 받았어서 스터디 이전에도 자바에 대한 기초는 있다고 생각했다.그래서 이번 ..." }, { "title": "자바 스터디 15 - 람다식", "url": "/posts/javastudy15/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-31 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2021/3/6, 15주차 람다식강의 깃허브 링크 : 15주차 과제: 람다식목차 람다식 사용법 함수형 인터페이스 Variable Capture 메소드, 생성자 레퍼런스람다식(lambda expression)자바가 1996년에 처음 등장한 이후로 두 번의 큰 변화가 있었는데, 첫 번째는 JDK 1.5부터 추가된 제네릭(generics)의 등장이고, 두 번째는 JDK 1.8부터..." }, { "title": "자바 스터디 14 - 제네릭", "url": "/posts/javastudy14/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-30 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2021/2/27, 14주차 Generic강의 깃허브 링크 : 14주차 과제: 제네릭목차 제네릭 사용법 제네릭 주요 개념 (바운디드 타입, 와일드 카드) 제네릭 메소드 만들기 Erasure제네릭스(Generics)란?제네릭스는 다양한 타입의 객체들을 다루는 메소드나 컬렉션 클래스에 컴파일 시의 타입 체크(compile-time type check)를 해주는 기능이다.객체의 ..." }, { "title": "자바 스터디 13 - I/O", "url": "/posts/javastudy13/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-28 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2021/2/20, 13주차 I/O강의 깃허브 링크 : 13주차 과제: I/O목차 스트림 (Stream) / 버퍼 (Buffer) / 채널 (Channel) 기반의 I/O InputStream과 OutputStream Byte와 Character 스트림 표준 스트림 (System.in, System.out, System.err) 파일 읽고 쓰기I/O 입출력입출력(I/O)란..." }, { "title": "[JAVA] 리플렉션 (Reflection)", "url": "/posts/reflection/", "categories": "Backend, Java", "tags": "java, 자바", "date": "2021-08-27 00:00:00 +0900", "snippet": "자바 스터디 12주차 애너테이션 과제를 진행하면서 리플렉션에 대한 언급이 있었는데 워낙 중요한 개념이기도 하고 언급될 때마다 항상 애매하게 이해하고 넘어갔어서 이번에 리플렉션만 따로 빼서 포스팅하려고 한다.리플렉션(Reflection)이란?리플렉션은 “구체적인 클래스의 타입을 알지 못해도, 클래스의 메소드, 타입, 변수 등에 접근할 수 있도록 해주는 자바 API” 라고 정의할 수 있다.이렇게 딱딱하고 교과서적인 정의를 보고 단번에 이해하기가 쉽지 않은데, 아래 코드를 한 번 보자.class Digimon{ public ..." }, { "title": "자바 스터디 12 - 애너테이션", "url": "/posts/javastudy12/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-26 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2021/2/6, 12주차 Annotation강의 깃허브 링크 : 12주차 과제: 애노테이션목차 애너테이션 정의하는 방법 @Retention @Target @Documented 애너테이션 프로세서애너테이션이란?프로그램 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로 포함시킨 것이 바로 애너테이션이다.애너테이션은 주석처럼 프로그래밍 언어에 영향을 미치지 않으..." }, { "title": "자바 스터디 11 - Enum", "url": "/posts/javastudy11/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-25 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2021/1/30, 11주차 Enum강의 깃허브 링크 : 11주차 과제: Enum목차 enum 정의하는 방법 enum이 제공하는 메소드 (values()와 valueOf()) java.lang.Enum EnumSetenum(열거형)이란?열거형은 서로 관련된 상수를 편하게 선언하기 위한 것으로 여러 상수를 정의할 때 사용하면 유용하다.자바의 열거형은 C언어의 열거형보다 더 향..." }, { "title": "자바 스터디 10 - 멀티쓰레드 프로그래밍", "url": "/posts/javastudy10/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-24 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2020/1/16, 10주차 멀티스레드 프로그래밍강의 깃허브 링크 : 10주차 과제: 멀티쓰레드 프로그래밍목차 Thread 클래스와 Runnable 인터페이스 쓰레드의 상태 쓰레드의 우선순위 Main 쓰레드 동기화 데드락Process와 Thread프로세스란, 간단히 말해서 실행 중인 프로그램을 말한다. 우리가 프로그램을 실행하면 OS로부터 실행에 필요한 자원(메모리)를 ..." }, { "title": "자바 스터디 09 - 예외 처리", "url": "/posts/javastudy09/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-21 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2020/1/16, 9주차 예외강의 깃허브 링크 : 9주차 과제: 예외 처리목차 자바에서 예외 처리 방법 (try, catch, throw, throws, finally) 자바가 제공하는 예외 계층 구조 Exception과 Error의 차이는? RuntimeException과 RE가 아닌 것의 차이는? 커스텀한 예외 만드는 방법Exception과 Error의 차이는?자바에..." }, { "title": "자바 스터디 08 - 인터페이스", "url": "/posts/javastudy08/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-20 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2020/1/9, 8주차 인터페이스강의 깃허브 링크 : 8주자 과제: 인터페이스목차 인터페이스 정의하는 방법 인터페이스 구현하는 방법 인터페이스 레퍼런스를 통해 구현체를 사용하는 방법 인터페이스 상속 인터페이스의 기본 메소드 (Default Method), 자바 8 인터페이스의 static 메소드, 자바 8 인터페이스의 private 메소드, 자바 9인터페이스란?인터페..." }, { "title": "자바 스터디 07 - 패키지", "url": "/posts/javastudy07/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-19 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [[자바 라이브 스터디] 2020/1/2, 7주차 패키지강의 깃허브 링크 : 7주차 과제: 패키지목차 package 키워드 import 키워드 클래스패스 CLASSPATH 환경변수 -classpath 옵션 접근지시자package 키워드package는 자바 클래스 또는 인터페이스를 묶는 디렉토리 개념이다. 서로 관련있는 클래스들끼리 그룹 단위로 묶어 놓음으로써 효율적으로 클래스들을 관리할 수 있..." }, { "title": "자바 스터디 06 - 상속", "url": "/posts/javastudy06-01/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-17 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2020/12/26, 6주차 상속강의 깃허브 링크 : 6주차 과제: 상속목차 자바 상속의 특징 super 키워드 메소드 오버라이딩 다이나믹 메소드 디스패치 (Dynamic Method Dispatch) 추상 클래스 final 키워드 Object 클래스자바 상속의 특징상속이란?상속(Inheritance)란, 부모 클래스의 변수와 메소드를 물려받는 것을 말한다. 자식 클래..." }, { "title": "자바 스터디 05 - 클래스", "url": "/posts/javastudy05/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-15 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2020/12/19, 5주차 클래스강의 깃허브 링크 : 5주차 과제: 클래스목차 클래스 정의하는 방법 객체 만드는 방법 (new 키워드 이해하기) 메소드 정의하는 방법 생성자 정의하는 방법 this 키워드 이해하기클래스 정의하는 방법클래스란클래스는 객체지향 프로그래밍(Object-Oriented Programming)에서 객체를 생성하기 위해 상태(state)와 행동(be..." }, { "title": "자바 스터디 04 - 제어문", "url": "/posts/javastudy04/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-14 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2020/12/12, 4주차 제어문강의 깃허브 링크 : 4주차 과제: 제어문목차 선택문 반복문제어문이란?제어문은 프로그램의 실행 흐름(순서)를 제어하는 구문을 말한다. 일반적으로 조건식과 실행 구문({})으로 구성된다.제어문의 종류는 아래와 같다. 조건문 (decision-making statements) : if문, switch문 반복문 (looping statements..." }, { "title": "자바 스터디 03 - 연산자", "url": "/posts/javastudy03/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-11 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 영상 링크 : [자바 라이브 스터디] 2020/11/28, 자바 스터디 3주차 연산자를 알아보자.강의 깃허브 링크 : 3주차 과제: 연산자 목차 산술 연산자 비트 연산자 관계 연산자 논리 연산자 instanceof assignment(=) operator 화살표(-&amp;gt;) 연산자 3항 연산자 연산자 우선 순위 (optional) Java 13. switch 연산자연산자란?연산자(Operato..." }, { "title": "자바 스터디 02 - 자바 데이터 타입, 변수 그리고 배열", "url": "/posts/javastudy02/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-10 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 링크 : [자바 뉴스 라이브] 2020/11/21, 자바 스터디 2주차깃허브 링크 : 2주차 과제: 자바 데이터 타입, 변수 그리고 배열목차 프리미티브 타입 종류와 값의 범위 그리고 기본 값 프리미티브 타입과 레퍼런스 타입 리터럴 변수 선언 및 초기화하는 방법 변수의 스코프와 라이프타임 타입 변환, 캐스팅 그리고 타입 프로모션 1차 및 2차 배열 선언하기 타입 추론, var프리미티브 타입 종류와 값의 범..." }, { "title": "자바 스터디 01 - JVM이란", "url": "/posts/javastudy01/", "categories": "Backend, Java", "tags": "java, java study, 자바, 자바 스터디", "date": "2021-08-08 00:00:00 +0900", "snippet": "들어가면서백기선님이 진행하신 자바 스터디 강의와 스터디에 참여하신 분들의 자료를 참고하여 작성한 글입니다.강의 링크 : [자바 뉴스 라이브] 2020/11/14, 자바 스터디 1주차깃허브 링크 : 1주차 과제: JVM은 무엇이며 자바 코드는 어떻게 실행하는 것인가.목차 JVM이란 무엇인가 컴파일 하는 방법 실행하는 방법 바이트코드란 무엇인가 JIT 컴파일러란 무엇이며 어떻게 동작하는지 JVM 구성 요소 JDK와 JRE의 차이JVM이란?JVM은 Java Virtual Machine의 줄임말로, 어느 OS 환경이던지 ..." }, { "title": "Consuming a RESTful Web Service", "url": "/posts/consuming-restful-web-service/", "categories": "Backend, Spring", "tags": "java, spring, guides", "date": "2021-08-07 00:00:00 +0900", "snippet": "스프링 문서 링크아래 게시물은 spring.io guide의 내용입니다.환경 설정 및 원본 문서 링크 link Fetching a REST ResourceRestful 서비스는 https://quoters.apps.pcfone.io/api/random 에서 임의의 JSON 데이터를 받아온다.JSON 형식 { type: &quot;success&quot;, value: { id: 10, quote: &quot;Really loving Spring Boot, m..." } ]
